from sqlalchemy.ext.asyncio import AsyncSession
from telebot.async_telebot import AsyncTeleBot
from telebot.asyncio_helper import ApiTelegramException
from telebot.states.asyncio import StateContext
from telebot.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)

from handlers.filters.prepare_question import FILTER_OPTION_HANDLER_MAP
from handlers.filters.settings import (
    FiltersStates,
    FilterOptions,
    FILTERS_FORM_PREFIX,
    FiltersStages,
)
from models import User, GameFormat
from utils.handlers.base_handler import BaseHandler
from utils.message_helpers import get_channel_link


class FiltersMenuHandler(BaseHandler):
    def register_handler(self):
        self.bot.register_message_handler(
            self.handle_message,
            commands=["search"],
            chat_types=["private"],
        )
        self.bot.register_callback_query_handler(
            self.handle_callback,
            func=lambda call: call.data
            == (f"{FILTERS_FORM_PREFIX}:" f"{FiltersStages.menu.value}"),
        )

    @classmethod
    async def show_menu(
        cls,
        chat_id: int,
        user: User,
        session: AsyncSession,
        bot: AsyncTeleBot,
        state: StateContext,
        edit_message_id: int | None = None,
    ):
        await state.set(FiltersStates.menu)

        set_filters = {}
        async with state.data() as data:
            set_filters = data

        keyboard = InlineKeyboardMarkup()

        if set_filters.get("format") == GameFormat.offline.value:
            first_row = (
                ("–§–æ—Ä–º–∞—Ç", FilterOptions.format.value),
                ("–ì–æ—Ä–æ–¥", FilterOptions.city.value),
            )
        else:
            first_row = (("–§–æ—Ä–º–∞—Ç", FilterOptions.format.value),)

        markup = (
            first_row,
            (
                ("–¶–µ–Ω–∞", FilterOptions.free.value),
                ("–ò–≥—Ä–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞", FilterOptions.system.value),
            ),
        )

        if set_filters.get("system") == "DnD":
            markup += (
                (
                    ("–†–µ–¥–∞–∫—Ü–∏—è", FilterOptions.dnd_redaction.value),
                    ("–°–µ—Ç—Ç–∏–Ω–≥", FilterOptions.dnd_setting.value),
                ),
            )

        markup += (
            (
                ("–¢–∏–ø –∏–≥—Ä—ã", FilterOptions.game_type.value),
                ("–í–æ–∑—Ä–∞—Å—Ç", FilterOptions.age.value),
            ),
            (("–¢—ç–≥–∏", FilterOptions.tags.value),),
        )

        for row in markup:
            keyboard.row(
                *[
                    InlineKeyboardButton(
                        (
                            await FILTER_OPTION_HANDLER_MAP[call_data].prepare_answer(
                                name, set_filters, session
                            )
                        ),
                        callback_data=(
                            f"{FILTERS_FORM_PREFIX}:"
                            f"{FiltersStages.choose_filter.value}:"
                            f"{call_data}"
                        ),
                    )
                    for name, call_data in row
                ]
            )

        keyboard.row(
            InlineKeyboardButton(
                "üóë –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
                callback_data=(
                    f"{FILTERS_FORM_PREFIX}:{FiltersStages.clear_filters.value}"
                ),
            )
        )
        keyboard.row(
            InlineKeyboardButton(
                "üîé –ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º",
                callback_data=f"{FILTERS_FORM_PREFIX}:{FiltersStages.search.value}",
            )
        )

        channel_link = await get_channel_link(bot)
        text = (
            '*–§–∏–ª—å—Ç—Ä—ã*\n\n'
            '–î–æ–±–∞–≤—å —Ñ–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º".\n\n'
            f'–¢–∞–∫–∂–µ –≤—Å–µ –∏–≥—Ä—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –Ω–∞—à–µ–º [–∫–∞–Ω–∞–ª–µ]({channel_link}), '
            f'–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è!'
        )
        if edit_message_id:
            try:
                await bot.edit_message_text(
                    text,
                    chat_id,
                    edit_message_id,
                    reply_markup=keyboard,
                    parse_mode="Markdown",
                )
            except ApiTelegramException:
                pass
        else:
            await bot.send_message(
                chat_id,
                text,
                reply_markup=keyboard,
                parse_mode="Markdown",
            )

    async def handle_message(
        self,
        message: Message,
        session: AsyncSession,
        user: User,
        state: StateContext,
    ):
        await self.show_menu(message.chat.id, user, session, self.bot, state)

    async def on_action(
        self,
        call: CallbackQuery,
        session: AsyncSession,
        user: User,
        state: StateContext,
    ):
        await self.show_menu(call.message.chat.id, user, session, self.bot, state)
